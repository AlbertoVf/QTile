#!/usr/bin/env python
# ? help  : qtile updater settings and docs.
# ? usage : qtile_manager [-h] [-f FONT] [-m MAIL] [-c CONSOLE] [-t THEME] [-d] [-l] [-r] [-s]

import argparse, subprocess
from time import sleep
from os.path import join, expanduser
from toml import dump, load, loads

qtile_path    = join(expanduser("~"), ".config", "qtile")
env_file      = join(qtile_path, "qtile.conf")
qtile_themes  = join(qtile_path, "themes")
qtile_theme   = join(qtile_themes, "themes.toml")
restart       = lambda: subprocess.run( "qtile cmd-obj -f restart", shell=True, check=False )
__themes_list = lambda: dict(sorted(loads(open(qtile_theme, "r").read()).items())).keys()

def changeValue(key: str, value: str):
    data = load(open(env_file))
    data["USER"][key] = value
    dump(data, open(env_file, "w"))
    restart()

def takeScreenshot():
    sleep(2)
    subprocess.Popen(["code", "--new-window", env_file])
    subprocess.Popen(["thunar", qtile_path])
    th = load(open(env_file))["USER"]["theme"]
    sleep(7)
    for t in __themes_list():
        changeValue("theme", t)
        sleep(5)
        subprocess.run(["scrot", "-o", f"{t}.jpg"], cwd=f"{qtile_themes}/Previews", check=True)
    changeValue("theme", th)
    docs()
    subprocess.run(["magick", "mogrify", "-resize", "900x650^", "*.jpg"], cwd=f"{qtile_themes}/Previews", check=False)


def docs():
    with open(f"{qtile_themes}/Previews.md", "w", encoding="utf-8") as f:
        f.write("# Previews\n\n")
        for i, (theme) in enumerate(__themes_list(), start=1):
            f.write(f"{i}. {theme} ![{theme}](./Previews/{theme}.jpg)\n")


def main():
    parser = argparse.ArgumentParser(description="Modify settings from qtile")
    parser.add_argument("-s", "--screenshot", action="store_true", help="Take screenshots with all themes", )
    parser.add_argument("-l", "--logs", action="store_true", help="Print Qtile log file" )
    parser.add_argument("-r", "--restart", action="store_true", help="Restart qtile")
    parser.add_argument("-c", "--configuration", choices=["console", "font", "mail", "theme"], help="Change qtile properties from qtile.conf", )
    parser.add_argument("-v", help="New value to property from -c")
    args = parser.parse_args()

    if args.screenshot: takeScreenshot()
    if args.logs: subprocess.run( "tail -n 20 ~/.local/share/qtile/qtile.log | bat -l log", shell=True, check=False)
    if args.restart: restart()
    if args.configuration and args.v: changeValue(args.configuration, args.v)

main()