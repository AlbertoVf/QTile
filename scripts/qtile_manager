#!/usr/bin/env python
##? usage : qtile_manager [-h] [-f FONT] [-m MAIL] [-c CONSOLE] [-t THEME] [-d] [-l] [-r] [-s]
##? help  : qtile updater settings and docs.

import argparse, subprocess, os
from time import sleep
from yaml import dump, safe_load as load
from enum import Enum
from dataclasses import dataclass

QTILE_PATH = os.path.join(os.path.expanduser("~"), ".config", "qtile")
ENV_FILE = os.path.join(QTILE_PATH, ".env")
QTILE_THEMES = os.path.join(QTILE_PATH, "themes")


@dataclass
class Env:
    font: str
    mail: str
    console: str
    theme: str

    @staticmethod
    def from_dict(obj: dict) -> "Env":
        return Env(
            str(obj.get("font")),
            str(obj.get("mail")),
            str(obj.get("console")),
            str(obj.get("theme")),
        )

    def save(self):
        dump(self.__dict__, open(ENV_FILE, "w"))


read_env = lambda: Env.from_dict(load(open(ENV_FILE, "r")))

logout = lambda: subprocess.run("qtile cmd-obj -o cmd -f shutdown", shell=True)

restart = lambda: subprocess.run("qtile cmd-obj -o cmd -f restart", shell=True)


def changeValue(key: str, value: str):
    env = read_env()
    if key == "font":
        env.font = value
    elif key == "mail":
        env.mail = value
    elif key == "console":
        env.console = value
    elif key == "theme":
        env.theme = value
    env.save()
    restart()


__themes_list = lambda: load(open(f"{QTILE_THEMES}/themes.yaml", "r"))


def takeScreenshot():
    data = __themes_list()
    sleep(3)
    for t in data:
        changeValue("theme", t)
        sleep(5)
        subprocess.run(["scrot", "-o", f"{t}.jpg"], cwd=f"{QTILE_THEMES}/scheme")
    docs()


def docs():
    data = __themes_list()
    with open(f"{QTILE_THEMES}/Previews.md", "w") as f:
        f.write("# Previews\n")
        for i, (theme) in enumerate(data, start=1):
            f.write(f"\n{i}. {theme} ![{theme}](./scheme/{theme}.jpg)")


def main():
    parser = argparse.ArgumentParser(description="Modify settings from qtile")
    parser.add_argument("-f", "--font", help="Change widget bar font")
    parser.add_argument("-m", "--mail", help="Update mail")
    parser.add_argument("-c", "--console", help="Update the terminal")
    parser.add_argument("-t", "--theme", help="Change theme")
    parser.add_argument("-d", "--docs", action="store_true", help="Update Previews.md")
    parser.add_argument("-l", "--logout", action="store_true", help="Close sesi√≥n")
    parser.add_argument("-r", "--restart", action="store_true", help="Restart qtile")
    parser.add_argument(
        "-s",
        "--screenshot",
        action="store_true",
        help="Take screenshots with all themes",
    )

    args = parser.parse_args()
    if args.logout:
        logout()
    if args.restart:
        restart()
    if args.theme:
        changeValue("theme", args.theme)
    if args.font:
        changeValue("font", args.font)
    if args.mail:
        changeValue("mail", args.mail)
    if args.console:
        changeValue("console", args.console)
    if args.screenshot:
        takeScreenshot()
    if args.docs:
        docs()


main()
